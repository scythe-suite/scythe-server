#!/bin/bash

SCYTHE_SERVER_VERSION=0.6.0

export TESTER_ID="$1" # this is safe since it is in .ssh/authorized_keys
if [ -z "$TESTER_ID" ]; then
    echo "scythe-server: missing TESTER_ID" >&2
    exit 1
fi

arguments=($SSH_ORIGINAL_COMMAND)

export SCYTHE_VERSION="${arguments[0]}"
if [ "$SCYTHE_SERVER_VERSION" != "$SCYTHE_VERSION" ]; then
    echo "scythe-server: version mismatch: client is '$SCYTHE_VERSION', server is '$SCYTHE_SERVER_VERSION'" >&2
    exit 1
fi

export SCYTHE_COMMAND="${arguments[1]}"

export SESSION_ID="${arguments[2]}"
if [ -z "$SESSION_ID" ]; then
    echo "scythe-server: missing SESSION_ID" >&2
    exit 1
fi

export SCYTHE_ROOT="$HOME/scythe-root/$TESTER_ID/$SESSION_ID"
export SCYTHE_TM_CONF="$SCYTHE_ROOT/conf-tm.py"
export SCYTHE_ST_CONF="$SCYTHE_ROOT/conf-st.py"
export SCYTHE_UPLOADS="$SCYTHE_ROOT/uploads"
export SCYTHE_NAME="${TESTER_ID}-${SESSION_ID}"
export SCYTHE_LABEL="scythe=session-${SCYTHE_NAME}"

mkdir -p "$SCYTHE_ROOT"
mkdir -p "$SCYTHE_UPLOADS"
if [ ! -r "$SCYTHE_UPLOADS/no.log" ]; then
    touch "$SCYTHE_UPLOADS/no.log" # to avoid tail failures
fi

echo -e "$(date)\t$SSH_CONNECTION\t$TESTER_ID\t$SCYTHE_COMMAND\t$SESSION_ID" >> "$HOME/scythe-server.log"

check_conf() {
    if [ ! -r "$SCYTHE_TM_CONF" ]; then
        echo "scythe-server: missing tm configuation for tester '$TESTER_ID'" >&2
        exit 1
    fi
    if [ ! -r "$SCYTHE_ST_CONF" ]; then
        echo "scythe-server: missing st configuation for tester '$TESTER_ID'" >&2
        exit 1
    fi
}

case "$SCYTHE_COMMAND" in
    push-tm)
        if [ -r "$SCYTHE_TM_CONF" ]; then
            echo "scythe-server: push-tm: replacing tm '$SESSION_ID' configuration for tester '$TESTER_ID'" >&2
        else
            echo "scythe-server: push-tm: installing tm '$SESSION_ID' configuration for tester '$TESTER_ID'" >&2
        fi
        cat > "$SCYTHE_TM_CONF"
    ;;
    push-st)
        if [ -r "$SCYTHE_ST_CONF" ]; then
            echo "scythe-server: push-st: replacing st '$SESSION_ID' configuration for tester '$TESTER_ID'" >&2
        else
            echo "scythe-server: push-st: installing st '$SESSION_ID' configuration for tester '$TESTER_ID'" >&2
        fi
        cat > "$SCYTHE_ST_CONF"
        echo "scythe-server: push-st: loading configurations on stserver..."
        docker run -e SCYTHE_REDIS_HOST="scythe-${TESTER_ID}-redis" --network scythe --rm -v "$SCYTHE_ST_CONF":/conf.py:ro  scythe/stserver configure -c /conf.py -s "$SESSION_ID"
    ;;
    start)
        check_conf
        echo "scythe-server: start: about to start '$SESSION_ID' for tester '$TESTER_ID'" >&2
        echo "scythe-server: start: removing signature for test UID '000000' in '$SESSION_ID' for tester '$TESTER_ID'" >&2
        rm -f "$SCYTHE_UPLOADS/000000/SIGNATURE.tsv"
        dids=$(docker ps -a --filter label="$SCYTHE_LABEL" --format '{{.ID}}')
        if [ ! -z "$dids" ]; then
            echo "scythe-server: sart: killing old instances..." $(docker rm -f $dids) >&2
        fi
        did=$(docker run --user "$(id -u):$(id -g)" -l "$SCYTHE_LABEL" --name "scythe-${SCYTHE_NAME}-tm" -d --network=scythe -v "$SCYTHE_UPLOADS":/uploads -v "$SCYTHE_TM_CONF":/app/conf.py:ro scythe/tmserver)
        echo "scythe-server: start: started tm 'scythe-${SCYTHE_NAME}-tm' with conf '$SCYTHE_TM_CONF', and uploads in '$SCYTHE_UPLOADS' (docker id '$did')..." >&2
        did=$(docker run -l "$SCYTHE_LABEL" --name "scythe-${SCYTHE_NAME}-st" -d --network=scythe -e SCYTHE_REDIS_HOST="scythe-${TESTER_ID}-redis" -v "$SCYTHE_UPLOADS":/uploads:ro scythe/stserver stage -wH /uploads -s "$SESSION_ID")
        echo "scythe-server: start: started st 'scythe-${SCYTHE_NAME}-st' with uploads in '$SCYTHE_UPLOADS' (docker id '$did')..." >&2
        echo "scythe-server: start: attempting to sign..."
        docker run --rm -it --entrypoint sh scythe/stserver -c "mkdir /tmp/test && export HOME=/tmp/test; eval \$( python -c 'from urllib2 import urlopen; exec urlopen( \"http://localhost:8080/tm/$TESTER_ID/$SESSION_ID/000000\" ).read()' ) && cd /tmp/test && find"
    ;;
    stop)
        check_conf
        echo "scythe-server: stop: stopping '$SESSION_ID' containers for tester '$TESTER_ID'" >&2
        dids=$(docker ps -a --filter label="$SCYTHE_LABEL" --format '{{.ID}}')
        if [ ! -z "$dids" ]; then
            echo "scythe-server: stop: killing old session instances..." $(docker rm -f $dids) >&2
        else
            echo "scythe-server: stop: no running container found" >&2
        fi
    ;;
    status)
        check_conf
        echo "scythe-server: status: running sessions for tester '$TESTER_ID'" >&2
        docker ps --filter label="$SCYTHE_LABEL" --format "table {{.ID}}\t{{.Names}}\t{{.Labels}}"
    ;;
    get)
        check_conf
        rsync --server --sender -vlogDtprz . "${SCYTHE_UPLOADS}/" # the leading / is crucial to have the content without uploads/ on the client
    ;;
    logtail)
        check_conf
        echo "scythe-server: logtail: tailing '$SESSION_ID' logs for tester '$TESTER_ID', hit ctrl-c to stop..." >&2
        tail -f "$SCYTHE_ROOT/uploads"/*.log
    ;;
    version)
        echo "scythe-server: version: version v$SCYTHE_SERVER_VERSION" >&2
        exit 0
    ;;
    *)
        echo "scythe-server: command '$SCYTHE_COMMAND' not recognized" >&2
        exit 1
esac
